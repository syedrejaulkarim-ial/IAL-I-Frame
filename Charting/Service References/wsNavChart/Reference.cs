//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17626
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace Charting.wsNavChart {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.mutualfundsindia.com/", ConfigurationName="wsNavChart.NAVChartSoap")]
    public interface NAVChartSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mutualfundsindia.com/FetchMutualFund", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginFetchMutualFund(string mFIds, System.AsyncCallback callback, object asyncState);
        
        Charting.wsNavChart.NameAndId[] EndFetchMutualFund(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mutualfundsindia.com/FetchSchemes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginFetchSchemes(string mutCode, System.AsyncCallback callback, object asyncState);
        
        Charting.wsNavChart.NameAndId[] EndFetchSchemes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mutualfundsindia.com/FetchIndices", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginFetchIndices(System.AsyncCallback callback, object asyncState);
        
        Charting.wsNavChart.NameAndId[] EndFetchIndices(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mutualfundsindia.com/FetchIndicesAgainstScheme", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginFetchIndicesAgainstScheme(string schemecode, System.AsyncCallback callback, object asyncState);
        
        Charting.wsNavChart.NameAndId[] EndFetchIndicesAgainstScheme(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mutualfundsindia.com/FetchNav", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginFetchNav(Charting.wsNavChart.SelectedItems[] items, string startdate, string enddate, System.AsyncCallback callback, object asyncState);
        
        Charting.wsNavChart.ArrayOfXElement EndFetchNav(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mutualfundsindia.com/FilterData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginFilterData(Charting.wsNavChart.SelectedItems[] items, string startdate, string enddate, System.AsyncCallback callback, object asyncState);
        
        Charting.wsNavChart.SelectedItems[] EndFilterData(System.IAsyncResult result);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.mutualfundsindia.com/")]
    public partial class NameAndId : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string idField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.mutualfundsindia.com/")]
    public partial class SelectedItems : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string idField;
        
        private bool isIndexField;
        
        private bool isCheckedField;
        
        public SelectedItems() {
            this.isCheckedField = true;
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool IsIndex {
            get {
                return this.isIndexField;
            }
            set {
                this.isIndexField = value;
                this.RaisePropertyChanged("IsIndex");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool IsChecked {
            get {
                return this.isCheckedField;
            }
            set {
                this.isCheckedField = value;
                this.RaisePropertyChanged("IsChecked");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface NAVChartSoapChannel : Charting.wsNavChart.NAVChartSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchMutualFundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchMutualFundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Charting.wsNavChart.NameAndId[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Charting.wsNavChart.NameAndId[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchSchemesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchSchemesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Charting.wsNavChart.NameAndId[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Charting.wsNavChart.NameAndId[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchIndicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchIndicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Charting.wsNavChart.NameAndId[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Charting.wsNavChart.NameAndId[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchIndicesAgainstSchemeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchIndicesAgainstSchemeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Charting.wsNavChart.NameAndId[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Charting.wsNavChart.NameAndId[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchNavCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchNavCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Charting.wsNavChart.ArrayOfXElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Charting.wsNavChart.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FilterDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FilterDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Charting.wsNavChart.SelectedItems[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Charting.wsNavChart.SelectedItems[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NAVChartSoapClient : System.ServiceModel.ClientBase<Charting.wsNavChart.NAVChartSoap>, Charting.wsNavChart.NAVChartSoap {
        
        private BeginOperationDelegate onBeginFetchMutualFundDelegate;
        
        private EndOperationDelegate onEndFetchMutualFundDelegate;
        
        private System.Threading.SendOrPostCallback onFetchMutualFundCompletedDelegate;
        
        private BeginOperationDelegate onBeginFetchSchemesDelegate;
        
        private EndOperationDelegate onEndFetchSchemesDelegate;
        
        private System.Threading.SendOrPostCallback onFetchSchemesCompletedDelegate;
        
        private BeginOperationDelegate onBeginFetchIndicesDelegate;
        
        private EndOperationDelegate onEndFetchIndicesDelegate;
        
        private System.Threading.SendOrPostCallback onFetchIndicesCompletedDelegate;
        
        private BeginOperationDelegate onBeginFetchIndicesAgainstSchemeDelegate;
        
        private EndOperationDelegate onEndFetchIndicesAgainstSchemeDelegate;
        
        private System.Threading.SendOrPostCallback onFetchIndicesAgainstSchemeCompletedDelegate;
        
        private BeginOperationDelegate onBeginFetchNavDelegate;
        
        private EndOperationDelegate onEndFetchNavDelegate;
        
        private System.Threading.SendOrPostCallback onFetchNavCompletedDelegate;
        
        private BeginOperationDelegate onBeginFilterDataDelegate;
        
        private EndOperationDelegate onEndFilterDataDelegate;
        
        private System.Threading.SendOrPostCallback onFilterDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public NAVChartSoapClient() {
        }
        
        public NAVChartSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NAVChartSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NAVChartSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NAVChartSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<FetchMutualFundCompletedEventArgs> FetchMutualFundCompleted;
        
        public event System.EventHandler<FetchSchemesCompletedEventArgs> FetchSchemesCompleted;
        
        public event System.EventHandler<FetchIndicesCompletedEventArgs> FetchIndicesCompleted;
        
        public event System.EventHandler<FetchIndicesAgainstSchemeCompletedEventArgs> FetchIndicesAgainstSchemeCompleted;
        
        public event System.EventHandler<FetchNavCompletedEventArgs> FetchNavCompleted;
        
        public event System.EventHandler<FilterDataCompletedEventArgs> FilterDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Charting.wsNavChart.NAVChartSoap.BeginFetchMutualFund(string mFIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchMutualFund(mFIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Charting.wsNavChart.NameAndId[] Charting.wsNavChart.NAVChartSoap.EndFetchMutualFund(System.IAsyncResult result) {
            return base.Channel.EndFetchMutualFund(result);
        }
        
        private System.IAsyncResult OnBeginFetchMutualFund(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string mFIds = ((string)(inValues[0]));
            return ((Charting.wsNavChart.NAVChartSoap)(this)).BeginFetchMutualFund(mFIds, callback, asyncState);
        }
        
        private object[] OnEndFetchMutualFund(System.IAsyncResult result) {
            Charting.wsNavChart.NameAndId[] retVal = ((Charting.wsNavChart.NAVChartSoap)(this)).EndFetchMutualFund(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchMutualFundCompleted(object state) {
            if ((this.FetchMutualFundCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchMutualFundCompleted(this, new FetchMutualFundCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchMutualFundAsync(string mFIds) {
            this.FetchMutualFundAsync(mFIds, null);
        }
        
        public void FetchMutualFundAsync(string mFIds, object userState) {
            if ((this.onBeginFetchMutualFundDelegate == null)) {
                this.onBeginFetchMutualFundDelegate = new BeginOperationDelegate(this.OnBeginFetchMutualFund);
            }
            if ((this.onEndFetchMutualFundDelegate == null)) {
                this.onEndFetchMutualFundDelegate = new EndOperationDelegate(this.OnEndFetchMutualFund);
            }
            if ((this.onFetchMutualFundCompletedDelegate == null)) {
                this.onFetchMutualFundCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchMutualFundCompleted);
            }
            base.InvokeAsync(this.onBeginFetchMutualFundDelegate, new object[] {
                        mFIds}, this.onEndFetchMutualFundDelegate, this.onFetchMutualFundCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Charting.wsNavChart.NAVChartSoap.BeginFetchSchemes(string mutCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchSchemes(mutCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Charting.wsNavChart.NameAndId[] Charting.wsNavChart.NAVChartSoap.EndFetchSchemes(System.IAsyncResult result) {
            return base.Channel.EndFetchSchemes(result);
        }
        
        private System.IAsyncResult OnBeginFetchSchemes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string mutCode = ((string)(inValues[0]));
            return ((Charting.wsNavChart.NAVChartSoap)(this)).BeginFetchSchemes(mutCode, callback, asyncState);
        }
        
        private object[] OnEndFetchSchemes(System.IAsyncResult result) {
            Charting.wsNavChart.NameAndId[] retVal = ((Charting.wsNavChart.NAVChartSoap)(this)).EndFetchSchemes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchSchemesCompleted(object state) {
            if ((this.FetchSchemesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchSchemesCompleted(this, new FetchSchemesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchSchemesAsync(string mutCode) {
            this.FetchSchemesAsync(mutCode, null);
        }
        
        public void FetchSchemesAsync(string mutCode, object userState) {
            if ((this.onBeginFetchSchemesDelegate == null)) {
                this.onBeginFetchSchemesDelegate = new BeginOperationDelegate(this.OnBeginFetchSchemes);
            }
            if ((this.onEndFetchSchemesDelegate == null)) {
                this.onEndFetchSchemesDelegate = new EndOperationDelegate(this.OnEndFetchSchemes);
            }
            if ((this.onFetchSchemesCompletedDelegate == null)) {
                this.onFetchSchemesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchSchemesCompleted);
            }
            base.InvokeAsync(this.onBeginFetchSchemesDelegate, new object[] {
                        mutCode}, this.onEndFetchSchemesDelegate, this.onFetchSchemesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Charting.wsNavChart.NAVChartSoap.BeginFetchIndices(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchIndices(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Charting.wsNavChart.NameAndId[] Charting.wsNavChart.NAVChartSoap.EndFetchIndices(System.IAsyncResult result) {
            return base.Channel.EndFetchIndices(result);
        }
        
        private System.IAsyncResult OnBeginFetchIndices(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Charting.wsNavChart.NAVChartSoap)(this)).BeginFetchIndices(callback, asyncState);
        }
        
        private object[] OnEndFetchIndices(System.IAsyncResult result) {
            Charting.wsNavChart.NameAndId[] retVal = ((Charting.wsNavChart.NAVChartSoap)(this)).EndFetchIndices(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchIndicesCompleted(object state) {
            if ((this.FetchIndicesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchIndicesCompleted(this, new FetchIndicesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchIndicesAsync() {
            this.FetchIndicesAsync(null);
        }
        
        public void FetchIndicesAsync(object userState) {
            if ((this.onBeginFetchIndicesDelegate == null)) {
                this.onBeginFetchIndicesDelegate = new BeginOperationDelegate(this.OnBeginFetchIndices);
            }
            if ((this.onEndFetchIndicesDelegate == null)) {
                this.onEndFetchIndicesDelegate = new EndOperationDelegate(this.OnEndFetchIndices);
            }
            if ((this.onFetchIndicesCompletedDelegate == null)) {
                this.onFetchIndicesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchIndicesCompleted);
            }
            base.InvokeAsync(this.onBeginFetchIndicesDelegate, null, this.onEndFetchIndicesDelegate, this.onFetchIndicesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Charting.wsNavChart.NAVChartSoap.BeginFetchIndicesAgainstScheme(string schemecode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchIndicesAgainstScheme(schemecode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Charting.wsNavChart.NameAndId[] Charting.wsNavChart.NAVChartSoap.EndFetchIndicesAgainstScheme(System.IAsyncResult result) {
            return base.Channel.EndFetchIndicesAgainstScheme(result);
        }
        
        private System.IAsyncResult OnBeginFetchIndicesAgainstScheme(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string schemecode = ((string)(inValues[0]));
            return ((Charting.wsNavChart.NAVChartSoap)(this)).BeginFetchIndicesAgainstScheme(schemecode, callback, asyncState);
        }
        
        private object[] OnEndFetchIndicesAgainstScheme(System.IAsyncResult result) {
            Charting.wsNavChart.NameAndId[] retVal = ((Charting.wsNavChart.NAVChartSoap)(this)).EndFetchIndicesAgainstScheme(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchIndicesAgainstSchemeCompleted(object state) {
            if ((this.FetchIndicesAgainstSchemeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchIndicesAgainstSchemeCompleted(this, new FetchIndicesAgainstSchemeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchIndicesAgainstSchemeAsync(string schemecode) {
            this.FetchIndicesAgainstSchemeAsync(schemecode, null);
        }
        
        public void FetchIndicesAgainstSchemeAsync(string schemecode, object userState) {
            if ((this.onBeginFetchIndicesAgainstSchemeDelegate == null)) {
                this.onBeginFetchIndicesAgainstSchemeDelegate = new BeginOperationDelegate(this.OnBeginFetchIndicesAgainstScheme);
            }
            if ((this.onEndFetchIndicesAgainstSchemeDelegate == null)) {
                this.onEndFetchIndicesAgainstSchemeDelegate = new EndOperationDelegate(this.OnEndFetchIndicesAgainstScheme);
            }
            if ((this.onFetchIndicesAgainstSchemeCompletedDelegate == null)) {
                this.onFetchIndicesAgainstSchemeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchIndicesAgainstSchemeCompleted);
            }
            base.InvokeAsync(this.onBeginFetchIndicesAgainstSchemeDelegate, new object[] {
                        schemecode}, this.onEndFetchIndicesAgainstSchemeDelegate, this.onFetchIndicesAgainstSchemeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Charting.wsNavChart.NAVChartSoap.BeginFetchNav(Charting.wsNavChart.SelectedItems[] items, string startdate, string enddate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchNav(items, startdate, enddate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Charting.wsNavChart.ArrayOfXElement Charting.wsNavChart.NAVChartSoap.EndFetchNav(System.IAsyncResult result) {
            return base.Channel.EndFetchNav(result);
        }
        
        private System.IAsyncResult OnBeginFetchNav(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Charting.wsNavChart.SelectedItems[] items = ((Charting.wsNavChart.SelectedItems[])(inValues[0]));
            string startdate = ((string)(inValues[1]));
            string enddate = ((string)(inValues[2]));
            return ((Charting.wsNavChart.NAVChartSoap)(this)).BeginFetchNav(items, startdate, enddate, callback, asyncState);
        }
        
        private object[] OnEndFetchNav(System.IAsyncResult result) {
            Charting.wsNavChart.ArrayOfXElement retVal = ((Charting.wsNavChart.NAVChartSoap)(this)).EndFetchNav(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchNavCompleted(object state) {
            if ((this.FetchNavCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchNavCompleted(this, new FetchNavCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchNavAsync(Charting.wsNavChart.SelectedItems[] items, string startdate, string enddate) {
            this.FetchNavAsync(items, startdate, enddate, null);
        }
        
        public void FetchNavAsync(Charting.wsNavChart.SelectedItems[] items, string startdate, string enddate, object userState) {
            if ((this.onBeginFetchNavDelegate == null)) {
                this.onBeginFetchNavDelegate = new BeginOperationDelegate(this.OnBeginFetchNav);
            }
            if ((this.onEndFetchNavDelegate == null)) {
                this.onEndFetchNavDelegate = new EndOperationDelegate(this.OnEndFetchNav);
            }
            if ((this.onFetchNavCompletedDelegate == null)) {
                this.onFetchNavCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchNavCompleted);
            }
            base.InvokeAsync(this.onBeginFetchNavDelegate, new object[] {
                        items,
                        startdate,
                        enddate}, this.onEndFetchNavDelegate, this.onFetchNavCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Charting.wsNavChart.NAVChartSoap.BeginFilterData(Charting.wsNavChart.SelectedItems[] items, string startdate, string enddate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFilterData(items, startdate, enddate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Charting.wsNavChart.SelectedItems[] Charting.wsNavChart.NAVChartSoap.EndFilterData(System.IAsyncResult result) {
            return base.Channel.EndFilterData(result);
        }
        
        private System.IAsyncResult OnBeginFilterData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Charting.wsNavChart.SelectedItems[] items = ((Charting.wsNavChart.SelectedItems[])(inValues[0]));
            string startdate = ((string)(inValues[1]));
            string enddate = ((string)(inValues[2]));
            return ((Charting.wsNavChart.NAVChartSoap)(this)).BeginFilterData(items, startdate, enddate, callback, asyncState);
        }
        
        private object[] OnEndFilterData(System.IAsyncResult result) {
            Charting.wsNavChart.SelectedItems[] retVal = ((Charting.wsNavChart.NAVChartSoap)(this)).EndFilterData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFilterDataCompleted(object state) {
            if ((this.FilterDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FilterDataCompleted(this, new FilterDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FilterDataAsync(Charting.wsNavChart.SelectedItems[] items, string startdate, string enddate) {
            this.FilterDataAsync(items, startdate, enddate, null);
        }
        
        public void FilterDataAsync(Charting.wsNavChart.SelectedItems[] items, string startdate, string enddate, object userState) {
            if ((this.onBeginFilterDataDelegate == null)) {
                this.onBeginFilterDataDelegate = new BeginOperationDelegate(this.OnBeginFilterData);
            }
            if ((this.onEndFilterDataDelegate == null)) {
                this.onEndFilterDataDelegate = new EndOperationDelegate(this.OnEndFilterData);
            }
            if ((this.onFilterDataCompletedDelegate == null)) {
                this.onFilterDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFilterDataCompleted);
            }
            base.InvokeAsync(this.onBeginFilterDataDelegate, new object[] {
                        items,
                        startdate,
                        enddate}, this.onEndFilterDataDelegate, this.onFilterDataCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Charting.wsNavChart.NAVChartSoap CreateChannel() {
            return new NAVChartSoapClientChannel(this);
        }
        
        private class NAVChartSoapClientChannel : ChannelBase<Charting.wsNavChart.NAVChartSoap>, Charting.wsNavChart.NAVChartSoap {
            
            public NAVChartSoapClientChannel(System.ServiceModel.ClientBase<Charting.wsNavChart.NAVChartSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginFetchMutualFund(string mFIds, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = mFIds;
                System.IAsyncResult _result = base.BeginInvoke("FetchMutualFund", _args, callback, asyncState);
                return _result;
            }
            
            public Charting.wsNavChart.NameAndId[] EndFetchMutualFund(System.IAsyncResult result) {
                object[] _args = new object[0];
                Charting.wsNavChart.NameAndId[] _result = ((Charting.wsNavChart.NameAndId[])(base.EndInvoke("FetchMutualFund", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFetchSchemes(string mutCode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = mutCode;
                System.IAsyncResult _result = base.BeginInvoke("FetchSchemes", _args, callback, asyncState);
                return _result;
            }
            
            public Charting.wsNavChart.NameAndId[] EndFetchSchemes(System.IAsyncResult result) {
                object[] _args = new object[0];
                Charting.wsNavChart.NameAndId[] _result = ((Charting.wsNavChart.NameAndId[])(base.EndInvoke("FetchSchemes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFetchIndices(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("FetchIndices", _args, callback, asyncState);
                return _result;
            }
            
            public Charting.wsNavChart.NameAndId[] EndFetchIndices(System.IAsyncResult result) {
                object[] _args = new object[0];
                Charting.wsNavChart.NameAndId[] _result = ((Charting.wsNavChart.NameAndId[])(base.EndInvoke("FetchIndices", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFetchIndicesAgainstScheme(string schemecode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = schemecode;
                System.IAsyncResult _result = base.BeginInvoke("FetchIndicesAgainstScheme", _args, callback, asyncState);
                return _result;
            }
            
            public Charting.wsNavChart.NameAndId[] EndFetchIndicesAgainstScheme(System.IAsyncResult result) {
                object[] _args = new object[0];
                Charting.wsNavChart.NameAndId[] _result = ((Charting.wsNavChart.NameAndId[])(base.EndInvoke("FetchIndicesAgainstScheme", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFetchNav(Charting.wsNavChart.SelectedItems[] items, string startdate, string enddate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = items;
                _args[1] = startdate;
                _args[2] = enddate;
                System.IAsyncResult _result = base.BeginInvoke("FetchNav", _args, callback, asyncState);
                return _result;
            }
            
            public Charting.wsNavChart.ArrayOfXElement EndFetchNav(System.IAsyncResult result) {
                object[] _args = new object[0];
                Charting.wsNavChart.ArrayOfXElement _result = ((Charting.wsNavChart.ArrayOfXElement)(base.EndInvoke("FetchNav", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFilterData(Charting.wsNavChart.SelectedItems[] items, string startdate, string enddate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = items;
                _args[1] = startdate;
                _args[2] = enddate;
                System.IAsyncResult _result = base.BeginInvoke("FilterData", _args, callback, asyncState);
                return _result;
            }
            
            public Charting.wsNavChart.SelectedItems[] EndFilterData(System.IAsyncResult result) {
                object[] _args = new object[0];
                Charting.wsNavChart.SelectedItems[] _result = ((Charting.wsNavChart.SelectedItems[])(base.EndInvoke("FilterData", _args, result)));
                return _result;
            }
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Silverlight.ServiceReference", "5.0.0.0")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement() {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes {
            get {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema() {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer) {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            ) {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader) {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            ) {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element)) {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else {
                    reader.Skip();
                }
            }
        }
    }
}
